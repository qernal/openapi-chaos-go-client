/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FunctionSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionSize{}

// FunctionSize Size of function, required CPU and Memory
type FunctionSize struct {
	// CPU in 0.1 vCPU increments, for a whole vCPU specify 1024 Must be in multiples of 128, with the same multiplier as memory from the base 
	Cpu int32 `json:"cpu"`
	// Memory in 128 MB increments, values are integer always in MB Must be in multiples of 128, with the same multiplier as CPU from the base 
	Memory int32 `json:"memory"`
}

type _FunctionSize FunctionSize

// NewFunctionSize instantiates a new FunctionSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionSize(cpu int32, memory int32) *FunctionSize {
	this := FunctionSize{}
	this.Cpu = cpu
	this.Memory = memory
	return &this
}

// NewFunctionSizeWithDefaults instantiates a new FunctionSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionSizeWithDefaults() *FunctionSize {
	this := FunctionSize{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *FunctionSize) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *FunctionSize) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *FunctionSize) SetCpu(v int32) {
	o.Cpu = v
}

// GetMemory returns the Memory field value
func (o *FunctionSize) GetMemory() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *FunctionSize) GetMemoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *FunctionSize) SetMemory(v int32) {
	o.Memory = v
}

func (o FunctionSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["memory"] = o.Memory
	return toSerialize, nil
}

func (o *FunctionSize) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"memory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionSize := _FunctionSize{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFunctionSize)

	if err != nil {
		return err
	}

	*o = FunctionSize(varFunctionSize)

	return err
}

type NullableFunctionSize struct {
	value *FunctionSize
	isSet bool
}

func (v NullableFunctionSize) Get() *FunctionSize {
	return v.value
}

func (v *NullableFunctionSize) Set(val *FunctionSize) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSize) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSize(val *FunctionSize) *NullableFunctionSize {
	return &NullableFunctionSize{value: val, isSet: true}
}

func (v NullableFunctionSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


