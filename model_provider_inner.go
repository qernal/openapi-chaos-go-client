/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
)

// checks if the ProviderInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderInner{}

// ProviderInner struct for ProviderInner
type ProviderInner struct {
	Id *string `json:"id,omitempty"`
	// Name of provider
	Name *string `json:"name,omitempty"`
	Locations *ProviderInnerLocations `json:"locations,omitempty"`
}

// NewProviderInner instantiates a new ProviderInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderInner() *ProviderInner {
	this := ProviderInner{}
	return &this
}

// NewProviderInnerWithDefaults instantiates a new ProviderInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderInnerWithDefaults() *ProviderInner {
	this := ProviderInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProviderInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProviderInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProviderInner) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProviderInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProviderInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProviderInner) SetName(v string) {
	o.Name = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *ProviderInner) GetLocations() ProviderInnerLocations {
	if o == nil || IsNil(o.Locations) {
		var ret ProviderInnerLocations
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderInner) GetLocationsOk() (*ProviderInnerLocations, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *ProviderInner) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given ProviderInnerLocations and assigns it to the Locations field.
func (o *ProviderInner) SetLocations(v ProviderInnerLocations) {
	o.Locations = &v
}

func (o ProviderInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableProviderInner struct {
	value *ProviderInner
	isSet bool
}

func (v NullableProviderInner) Get() *ProviderInner {
	return v.value
}

func (v *NullableProviderInner) Set(val *ProviderInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderInner(val *ProviderInner) *NullableProviderInner {
	return &NullableProviderInner{value: val, isSet: true}
}

func (v NullableProviderInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


