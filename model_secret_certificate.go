/*
Chaos

Central Management API - publicly exposed set of APIs for cloud resources

API version: 1.0.0
Contact: help@qernal.support
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecretCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretCertificate{}

// SecretCertificate Encrypted SSL private key and plain certificate. Certificate expected in x509 pem format, key expected in pkcs8 or pkcs1 pem format. `type: certificate`
type SecretCertificate struct {
	// Public certificate
	Certificate string `json:"certificate"`
	// Encrypted certificate private key
	CertificateValue string `json:"certificate_value"`
}

type _SecretCertificate SecretCertificate

// NewSecretCertificate instantiates a new SecretCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretCertificate(certificate string, certificateValue string) *SecretCertificate {
	this := SecretCertificate{}
	this.Certificate = certificate
	this.CertificateValue = certificateValue
	return &this
}

// NewSecretCertificateWithDefaults instantiates a new SecretCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretCertificateWithDefaults() *SecretCertificate {
	this := SecretCertificate{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *SecretCertificate) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *SecretCertificate) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *SecretCertificate) SetCertificate(v string) {
	o.Certificate = v
}

// GetCertificateValue returns the CertificateValue field value
func (o *SecretCertificate) GetCertificateValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateValue
}

// GetCertificateValueOk returns a tuple with the CertificateValue field value
// and a boolean to check if the value has been set.
func (o *SecretCertificate) GetCertificateValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateValue, true
}

// SetCertificateValue sets field value
func (o *SecretCertificate) SetCertificateValue(v string) {
	o.CertificateValue = v
}

func (o SecretCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	toSerialize["certificate_value"] = o.CertificateValue
	return toSerialize, nil
}

func (o *SecretCertificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"certificate_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretCertificate := _SecretCertificate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretCertificate)

	if err != nil {
		return err
	}

	*o = SecretCertificate(varSecretCertificate)

	return err
}

type NullableSecretCertificate struct {
	value *SecretCertificate
	isSet bool
}

func (v NullableSecretCertificate) Get() *SecretCertificate {
	return v.value
}

func (v *NullableSecretCertificate) Set(val *SecretCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretCertificate(val *SecretCertificate) *NullableSecretCertificate {
	return &NullableSecretCertificate{value: val, isSet: true}
}

func (v NullableSecretCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


