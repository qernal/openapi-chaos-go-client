/*
Chaos

Central Management API - publicly exposed set of APIs for cloud resources

API version: 1.0.0
Contact: help@qernal.support
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderLocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderLocations{}

// ProviderLocations Locations at varying levels this provider operates within
type ProviderLocations struct {
	Continents []string `json:"continents"`
	Countries []string `json:"countries"`
	Cities []string `json:"cities"`
}

type _ProviderLocations ProviderLocations

// NewProviderLocations instantiates a new ProviderLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderLocations(continents []string, countries []string, cities []string) *ProviderLocations {
	this := ProviderLocations{}
	this.Continents = continents
	this.Countries = countries
	this.Cities = cities
	return &this
}

// NewProviderLocationsWithDefaults instantiates a new ProviderLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderLocationsWithDefaults() *ProviderLocations {
	this := ProviderLocations{}
	return &this
}

// GetContinents returns the Continents field value
func (o *ProviderLocations) GetContinents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Continents
}

// GetContinentsOk returns a tuple with the Continents field value
// and a boolean to check if the value has been set.
func (o *ProviderLocations) GetContinentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Continents, true
}

// SetContinents sets field value
func (o *ProviderLocations) SetContinents(v []string) {
	o.Continents = v
}

// GetCountries returns the Countries field value
func (o *ProviderLocations) GetCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value
// and a boolean to check if the value has been set.
func (o *ProviderLocations) GetCountriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Countries, true
}

// SetCountries sets field value
func (o *ProviderLocations) SetCountries(v []string) {
	o.Countries = v
}

// GetCities returns the Cities field value
func (o *ProviderLocations) GetCities() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value
// and a boolean to check if the value has been set.
func (o *ProviderLocations) GetCitiesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cities, true
}

// SetCities sets field value
func (o *ProviderLocations) SetCities(v []string) {
	o.Cities = v
}

func (o ProviderLocations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderLocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["continents"] = o.Continents
	toSerialize["countries"] = o.Countries
	toSerialize["cities"] = o.Cities
	return toSerialize, nil
}

func (o *ProviderLocations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"continents",
		"countries",
		"cities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderLocations := _ProviderLocations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderLocations)

	if err != nil {
		return err
	}

	*o = ProviderLocations(varProviderLocations)

	return err
}

type NullableProviderLocations struct {
	value *ProviderLocations
	isSet bool
}

func (v NullableProviderLocations) Get() *ProviderLocations {
	return v.value
}

func (v *NullableProviderLocations) Set(val *ProviderLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderLocations(val *ProviderLocations) *NullableProviderLocations {
	return &NullableProviderLocations{value: val, isSet: true}
}

func (v NullableProviderLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


