/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
)

// checks if the ProjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectResponse{}

// ProjectResponse Project response
type ProjectResponse struct {
	// Project id
	Id string `json:"id"`
	// Organisation id
	OrgId string `json:"org_id"`
	// Project name
	Name string `json:"name"`
	Date Date `json:"date"`
}

// NewProjectResponse instantiates a new ProjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectResponse(id string, orgId string, name string, date Date) *ProjectResponse {
	this := ProjectResponse{}
	this.Id = id
	this.OrgId = orgId
	this.Name = name
	this.Date = date
	return &this
}

// NewProjectResponseWithDefaults instantiates a new ProjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectResponseWithDefaults() *ProjectResponse {
	this := ProjectResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ProjectResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectResponse) SetId(v string) {
	o.Id = v
}

// GetOrgId returns the OrgId field value
func (o *ProjectResponse) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ProjectResponse) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ProjectResponse) SetOrgId(v string) {
	o.OrgId = v
}

// GetName returns the Name field value
func (o *ProjectResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectResponse) SetName(v string) {
	o.Name = v
}

// GetDate returns the Date field value
func (o *ProjectResponse) GetDate() Date {
	if o == nil {
		var ret Date
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *ProjectResponse) GetDateOk() (*Date, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *ProjectResponse) SetDate(v Date) {
	o.Date = v
}

func (o ProjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["org_id"] = o.OrgId
	toSerialize["name"] = o.Name
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

type NullableProjectResponse struct {
	value *ProjectResponse
	isSet bool
}

func (v NullableProjectResponse) Get() *ProjectResponse {
	return v.value
}

func (v *NullableProjectResponse) Set(val *ProjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectResponse(val *ProjectResponse) *NullableProjectResponse {
	return &NullableProjectResponse{value: val, isSet: true}
}

func (v NullableProjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


