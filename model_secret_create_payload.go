/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SecretCreatePayload - Payload for secret
type SecretCreatePayload struct {
	SecretCertificate *SecretCertificate
	SecretEnvironment *SecretEnvironment
	SecretRegistry *SecretRegistry
}

// SecretCertificateAsSecretCreatePayload is a convenience function that returns SecretCertificate wrapped in SecretCreatePayload
func SecretCertificateAsSecretCreatePayload(v *SecretCertificate) SecretCreatePayload {
	return SecretCreatePayload{
		SecretCertificate: v,
	}
}

// SecretEnvironmentAsSecretCreatePayload is a convenience function that returns SecretEnvironment wrapped in SecretCreatePayload
func SecretEnvironmentAsSecretCreatePayload(v *SecretEnvironment) SecretCreatePayload {
	return SecretCreatePayload{
		SecretEnvironment: v,
	}
}

// SecretRegistryAsSecretCreatePayload is a convenience function that returns SecretRegistry wrapped in SecretCreatePayload
func SecretRegistryAsSecretCreatePayload(v *SecretRegistry) SecretCreatePayload {
	return SecretCreatePayload{
		SecretRegistry: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretCreatePayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SecretCertificate
	err = newStrictDecoder(data).Decode(&dst.SecretCertificate)
	if err == nil {
		jsonSecretCertificate, _ := json.Marshal(dst.SecretCertificate)
		if string(jsonSecretCertificate) == "{}" { // empty struct
			dst.SecretCertificate = nil
		} else {
			if err = validator.Validate(dst.SecretCertificate); err != nil {
				dst.SecretCertificate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretCertificate = nil
	}

	// try to unmarshal data into SecretEnvironment
	err = newStrictDecoder(data).Decode(&dst.SecretEnvironment)
	if err == nil {
		jsonSecretEnvironment, _ := json.Marshal(dst.SecretEnvironment)
		if string(jsonSecretEnvironment) == "{}" { // empty struct
			dst.SecretEnvironment = nil
		} else {
			if err = validator.Validate(dst.SecretEnvironment); err != nil {
				dst.SecretEnvironment = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretEnvironment = nil
	}

	// try to unmarshal data into SecretRegistry
	err = newStrictDecoder(data).Decode(&dst.SecretRegistry)
	if err == nil {
		jsonSecretRegistry, _ := json.Marshal(dst.SecretRegistry)
		if string(jsonSecretRegistry) == "{}" { // empty struct
			dst.SecretRegistry = nil
		} else {
			if err = validator.Validate(dst.SecretRegistry); err != nil {
				dst.SecretRegistry = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretRegistry = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SecretCertificate = nil
		dst.SecretEnvironment = nil
		dst.SecretRegistry = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecretCreatePayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecretCreatePayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretCreatePayload) MarshalJSON() ([]byte, error) {
	if src.SecretCertificate != nil {
		return json.Marshal(&src.SecretCertificate)
	}

	if src.SecretEnvironment != nil {
		return json.Marshal(&src.SecretEnvironment)
	}

	if src.SecretRegistry != nil {
		return json.Marshal(&src.SecretRegistry)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretCreatePayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SecretCertificate != nil {
		return obj.SecretCertificate
	}

	if obj.SecretEnvironment != nil {
		return obj.SecretEnvironment
	}

	if obj.SecretRegistry != nil {
		return obj.SecretRegistry
	}

	// all schemas are nil
	return nil
}

type NullableSecretCreatePayload struct {
	value *SecretCreatePayload
	isSet bool
}

func (v NullableSecretCreatePayload) Get() *SecretCreatePayload {
	return v.value
}

func (v *NullableSecretCreatePayload) Set(val *SecretCreatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretCreatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretCreatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretCreatePayload(val *SecretCreatePayload) *NullableSecretCreatePayload {
	return &NullableSecretCreatePayload{value: val, isSet: true}
}

func (v NullableSecretCreatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretCreatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


