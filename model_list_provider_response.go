/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListProviderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProviderResponse{}

// ListProviderResponse List of providers
type ListProviderResponse struct {
	Meta PaginationMeta `json:"meta"`
	Data []Provider `json:"data"`
}

type _ListProviderResponse ListProviderResponse

// NewListProviderResponse instantiates a new ListProviderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProviderResponse(meta PaginationMeta, data []Provider) *ListProviderResponse {
	this := ListProviderResponse{}
	this.Meta = meta
	this.Data = data
	return &this
}

// NewListProviderResponseWithDefaults instantiates a new ListProviderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProviderResponseWithDefaults() *ListProviderResponse {
	this := ListProviderResponse{}
	return &this
}

// GetMeta returns the Meta field value
func (o *ListProviderResponse) GetMeta() PaginationMeta {
	if o == nil {
		var ret PaginationMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ListProviderResponse) GetMetaOk() (*PaginationMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ListProviderResponse) SetMeta(v PaginationMeta) {
	o.Meta = v
}

// GetData returns the Data field value
func (o *ListProviderResponse) GetData() []Provider {
	if o == nil {
		var ret []Provider
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListProviderResponse) GetDataOk() ([]Provider, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListProviderResponse) SetData(v []Provider) {
	o.Data = v
}

func (o ListProviderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListProviderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["meta"] = o.Meta
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ListProviderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meta",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListProviderResponse := _ListProviderResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListProviderResponse)

	if err != nil {
		return err
	}

	*o = ListProviderResponse(varListProviderResponse)

	return err
}

type NullableListProviderResponse struct {
	value *ListProviderResponse
	isSet bool
}

func (v NullableListProviderResponse) Get() *ListProviderResponse {
	return v.value
}

func (v *NullableListProviderResponse) Set(val *ListProviderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListProviderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListProviderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProviderResponse(val *ListProviderResponse) *NullableListProviderResponse {
	return &NullableListProviderResponse{value: val, isSet: true}
}

func (v NullableListProviderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProviderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


