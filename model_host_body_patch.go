/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-chaos-client

import (
	"encoding/json"
)

// checks if the HostBodyPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostBodyPatch{}

// HostBodyPatch Host body update
type HostBodyPatch struct {
	// Reference to secret certificate path
	Certificate *string `json:"certificate,omitempty"`
	// If the host is disabled, then this host won't be accessible and so the deployments will not work on this host
	Disabled *bool `json:"disabled,omitempty"`
}

// NewHostBodyPatch instantiates a new HostBodyPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostBodyPatch() *HostBodyPatch {
	this := HostBodyPatch{}
	return &this
}

// NewHostBodyPatchWithDefaults instantiates a new HostBodyPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostBodyPatchWithDefaults() *HostBodyPatch {
	this := HostBodyPatch{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *HostBodyPatch) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostBodyPatch) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *HostBodyPatch) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *HostBodyPatch) SetCertificate(v string) {
	o.Certificate = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *HostBodyPatch) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostBodyPatch) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *HostBodyPatch) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *HostBodyPatch) SetDisabled(v bool) {
	o.Disabled = &v
}

func (o HostBodyPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostBodyPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	return toSerialize, nil
}

type NullableHostBodyPatch struct {
	value *HostBodyPatch
	isSet bool
}

func (v NullableHostBodyPatch) Get() *HostBodyPatch {
	return v.value
}

func (v *NullableHostBodyPatch) Set(val *HostBodyPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableHostBodyPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableHostBodyPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostBodyPatch(val *HostBodyPatch) *NullableHostBodyPatch {
	return &NullableHostBodyPatch{value: val, isSet: true}
}

func (v NullableHostBodyPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostBodyPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


