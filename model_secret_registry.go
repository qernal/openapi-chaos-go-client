/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecretRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretRegistry{}

// SecretRegistry Encrypted private container registry, `type: registry`
type SecretRegistry struct {
	// Url to private container repository (for docker registry use docker.io)
	Registry string `json:"registry"`
	// Token used for auth to the registry
	RegistryValue string `json:"registry_value"`
}

type _SecretRegistry SecretRegistry

// NewSecretRegistry instantiates a new SecretRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretRegistry(registry string, registryValue string) *SecretRegistry {
	this := SecretRegistry{}
	this.Registry = registry
	this.RegistryValue = registryValue
	return &this
}

// NewSecretRegistryWithDefaults instantiates a new SecretRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretRegistryWithDefaults() *SecretRegistry {
	this := SecretRegistry{}
	return &this
}

// GetRegistry returns the Registry field value
func (o *SecretRegistry) GetRegistry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value
// and a boolean to check if the value has been set.
func (o *SecretRegistry) GetRegistryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registry, true
}

// SetRegistry sets field value
func (o *SecretRegistry) SetRegistry(v string) {
	o.Registry = v
}

// GetRegistryValue returns the RegistryValue field value
func (o *SecretRegistry) GetRegistryValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryValue
}

// GetRegistryValueOk returns a tuple with the RegistryValue field value
// and a boolean to check if the value has been set.
func (o *SecretRegistry) GetRegistryValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryValue, true
}

// SetRegistryValue sets field value
func (o *SecretRegistry) SetRegistryValue(v string) {
	o.RegistryValue = v
}

func (o SecretRegistry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registry"] = o.Registry
	toSerialize["registry_value"] = o.RegistryValue
	return toSerialize, nil
}

func (o *SecretRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registry",
		"registry_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretRegistry := _SecretRegistry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretRegistry)

	if err != nil {
		return err
	}

	*o = SecretRegistry(varSecretRegistry)

	return err
}

type NullableSecretRegistry struct {
	value *SecretRegistry
	isSet bool
}

func (v NullableSecretRegistry) Get() *SecretRegistry {
	return v.value
}

func (v *NullableSecretRegistry) Set(val *SecretRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretRegistry(val *SecretRegistry) *NullableSecretRegistry {
	return &NullableSecretRegistry{value: val, isSet: true}
}

func (v NullableSecretRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


