/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"fmt"
)

// SecretMetaType Secrets types: registry, certificate, environment, dek
type SecretMetaType string

// List of SecretMetaType
const (
	REGISTRY SecretMetaType = "registry"
	CERTIFICATE SecretMetaType = "certificate"
	ENVIRONMENT SecretMetaType = "environment"
	DEK SecretMetaType = "dek"
)

// All allowed values of SecretMetaType enum
var AllowedSecretMetaTypeEnumValues = []SecretMetaType{
	"registry",
	"certificate",
	"environment",
	"dek",
}

func (v *SecretMetaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretMetaType(value)
	for _, existing := range AllowedSecretMetaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretMetaType", value)
}

// NewSecretMetaTypeFromValue returns a pointer to a valid SecretMetaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretMetaTypeFromValue(v string) (*SecretMetaType, error) {
	ev := SecretMetaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretMetaType: valid values are %v", v, AllowedSecretMetaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretMetaType) IsValid() bool {
	for _, existing := range AllowedSecretMetaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecretMetaType value
func (v SecretMetaType) Ptr() *SecretMetaType {
	return &v
}

type NullableSecretMetaType struct {
	value *SecretMetaType
	isSet bool
}

func (v NullableSecretMetaType) Get() *SecretMetaType {
	return v.value
}

func (v *NullableSecretMetaType) Set(val *SecretMetaType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretMetaType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretMetaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretMetaType(val *SecretMetaType) *NullableSecretMetaType {
	return &NullableSecretMetaType{value: val, isSet: true}
}

func (v NullableSecretMetaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretMetaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

