/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FunctionScaling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionScaling{}

// FunctionScaling Scaling logic
type FunctionScaling struct {
	// CPU or Memory supported
	Type string `json:"type"`
	// For type to drop below before scale down
	Low int32 `json:"low"`
	// For type to go above before scale up
	High int32 `json:"high"`
}

type _FunctionScaling FunctionScaling

// NewFunctionScaling instantiates a new FunctionScaling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionScaling(type_ string, low int32, high int32) *FunctionScaling {
	this := FunctionScaling{}
	this.Type = type_
	this.Low = low
	this.High = high
	return &this
}

// NewFunctionScalingWithDefaults instantiates a new FunctionScaling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionScalingWithDefaults() *FunctionScaling {
	this := FunctionScaling{}
	return &this
}

// GetType returns the Type field value
func (o *FunctionScaling) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FunctionScaling) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FunctionScaling) SetType(v string) {
	o.Type = v
}

// GetLow returns the Low field value
func (o *FunctionScaling) GetLow() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Low
}

// GetLowOk returns a tuple with the Low field value
// and a boolean to check if the value has been set.
func (o *FunctionScaling) GetLowOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Low, true
}

// SetLow sets field value
func (o *FunctionScaling) SetLow(v int32) {
	o.Low = v
}

// GetHigh returns the High field value
func (o *FunctionScaling) GetHigh() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.High
}

// GetHighOk returns a tuple with the High field value
// and a boolean to check if the value has been set.
func (o *FunctionScaling) GetHighOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.High, true
}

// SetHigh sets field value
func (o *FunctionScaling) SetHigh(v int32) {
	o.High = v
}

func (o FunctionScaling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionScaling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["low"] = o.Low
	toSerialize["high"] = o.High
	return toSerialize, nil
}

func (o *FunctionScaling) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"low",
		"high",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionScaling := _FunctionScaling{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFunctionScaling)

	if err != nil {
		return err
	}

	*o = FunctionScaling(varFunctionScaling)

	return err
}

type NullableFunctionScaling struct {
	value *FunctionScaling
	isSet bool
}

func (v NullableFunctionScaling) Get() *FunctionScaling {
	return v.value
}

func (v *NullableFunctionScaling) Set(val *FunctionScaling) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionScaling) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionScaling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionScaling(val *FunctionScaling) *NullableFunctionScaling {
	return &NullableFunctionScaling{value: val, isSet: true}
}

func (v NullableFunctionScaling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionScaling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


