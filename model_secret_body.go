/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecretBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretBody{}

// SecretBody Secret body
type SecretBody struct {
	// Secret name
	Name string `json:"name" validate:"regexp=^[A-Z_]+$"`
	Type SecretCreateType `json:"type"`
	Payload SecretCreatePayload `json:"payload"`
	// Encryption entity
	Encryption string `json:"encryption" validate:"regexp=^keys\\/dek\\/[0-9]+$"`
}

type _SecretBody SecretBody

// NewSecretBody instantiates a new SecretBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretBody(name string, type_ SecretCreateType, payload SecretCreatePayload, encryption string) *SecretBody {
	this := SecretBody{}
	this.Name = name
	this.Type = type_
	this.Payload = payload
	this.Encryption = encryption
	return &this
}

// NewSecretBodyWithDefaults instantiates a new SecretBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretBodyWithDefaults() *SecretBody {
	this := SecretBody{}
	return &this
}

// GetName returns the Name field value
func (o *SecretBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretBody) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *SecretBody) GetType() SecretCreateType {
	if o == nil {
		var ret SecretCreateType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecretBody) GetTypeOk() (*SecretCreateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecretBody) SetType(v SecretCreateType) {
	o.Type = v
}

// GetPayload returns the Payload field value
func (o *SecretBody) GetPayload() SecretCreatePayload {
	if o == nil {
		var ret SecretCreatePayload
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *SecretBody) GetPayloadOk() (*SecretCreatePayload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *SecretBody) SetPayload(v SecretCreatePayload) {
	o.Payload = v
}

// GetEncryption returns the Encryption field value
func (o *SecretBody) GetEncryption() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value
// and a boolean to check if the value has been set.
func (o *SecretBody) GetEncryptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encryption, true
}

// SetEncryption sets field value
func (o *SecretBody) SetEncryption(v string) {
	o.Encryption = v
}

func (o SecretBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["payload"] = o.Payload
	toSerialize["encryption"] = o.Encryption
	return toSerialize, nil
}

func (o *SecretBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"payload",
		"encryption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretBody := _SecretBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretBody)

	if err != nil {
		return err
	}

	*o = SecretBody(varSecretBody)

	return err
}

type NullableSecretBody struct {
	value *SecretBody
	isSet bool
}

func (v NullableSecretBody) Get() *SecretBody {
	return v.value
}

func (v *NullableSecretBody) Set(val *SecretBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretBody(val *SecretBody) *NullableSecretBody {
	return &NullableSecretBody{value: val, isSet: true}
}

func (v NullableSecretBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


