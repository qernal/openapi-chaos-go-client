/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SecretMetaResponsePayload - struct for SecretMetaResponsePayload
type SecretMetaResponsePayload struct {
	SecretMetaResponseCertificatePayload *SecretMetaResponseCertificatePayload
	SecretMetaResponseDek *SecretMetaResponseDek
	SecretMetaResponseRegistryPayload *SecretMetaResponseRegistryPayload
}

// SecretMetaResponseCertificatePayloadAsSecretMetaResponsePayload is a convenience function that returns SecretMetaResponseCertificatePayload wrapped in SecretMetaResponsePayload
func SecretMetaResponseCertificatePayloadAsSecretMetaResponsePayload(v *SecretMetaResponseCertificatePayload) SecretMetaResponsePayload {
	return SecretMetaResponsePayload{
		SecretMetaResponseCertificatePayload: v,
	}
}

// SecretMetaResponseDekAsSecretMetaResponsePayload is a convenience function that returns SecretMetaResponseDek wrapped in SecretMetaResponsePayload
func SecretMetaResponseDekAsSecretMetaResponsePayload(v *SecretMetaResponseDek) SecretMetaResponsePayload {
	return SecretMetaResponsePayload{
		SecretMetaResponseDek: v,
	}
}

// SecretMetaResponseRegistryPayloadAsSecretMetaResponsePayload is a convenience function that returns SecretMetaResponseRegistryPayload wrapped in SecretMetaResponsePayload
func SecretMetaResponseRegistryPayloadAsSecretMetaResponsePayload(v *SecretMetaResponseRegistryPayload) SecretMetaResponsePayload {
	return SecretMetaResponsePayload{
		SecretMetaResponseRegistryPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretMetaResponsePayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SecretMetaResponseCertificatePayload
	err = newStrictDecoder(data).Decode(&dst.SecretMetaResponseCertificatePayload)
	if err == nil {
		jsonSecretMetaResponseCertificatePayload, _ := json.Marshal(dst.SecretMetaResponseCertificatePayload)
		if string(jsonSecretMetaResponseCertificatePayload) == "{}" { // empty struct
			dst.SecretMetaResponseCertificatePayload = nil
		} else {
			if err = validator.Validate(dst.SecretMetaResponseCertificatePayload); err != nil {
				dst.SecretMetaResponseCertificatePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretMetaResponseCertificatePayload = nil
	}

	// try to unmarshal data into SecretMetaResponseDek
	err = newStrictDecoder(data).Decode(&dst.SecretMetaResponseDek)
	if err == nil {
		jsonSecretMetaResponseDek, _ := json.Marshal(dst.SecretMetaResponseDek)
		if string(jsonSecretMetaResponseDek) == "{}" { // empty struct
			dst.SecretMetaResponseDek = nil
		} else {
			if err = validator.Validate(dst.SecretMetaResponseDek); err != nil {
				dst.SecretMetaResponseDek = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretMetaResponseDek = nil
	}

	// try to unmarshal data into SecretMetaResponseRegistryPayload
	err = newStrictDecoder(data).Decode(&dst.SecretMetaResponseRegistryPayload)
	if err == nil {
		jsonSecretMetaResponseRegistryPayload, _ := json.Marshal(dst.SecretMetaResponseRegistryPayload)
		if string(jsonSecretMetaResponseRegistryPayload) == "{}" { // empty struct
			dst.SecretMetaResponseRegistryPayload = nil
		} else {
			if err = validator.Validate(dst.SecretMetaResponseRegistryPayload); err != nil {
				dst.SecretMetaResponseRegistryPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecretMetaResponseRegistryPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SecretMetaResponseCertificatePayload = nil
		dst.SecretMetaResponseDek = nil
		dst.SecretMetaResponseRegistryPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecretMetaResponsePayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecretMetaResponsePayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretMetaResponsePayload) MarshalJSON() ([]byte, error) {
	if src.SecretMetaResponseCertificatePayload != nil {
		return json.Marshal(&src.SecretMetaResponseCertificatePayload)
	}

	if src.SecretMetaResponseDek != nil {
		return json.Marshal(&src.SecretMetaResponseDek)
	}

	if src.SecretMetaResponseRegistryPayload != nil {
		return json.Marshal(&src.SecretMetaResponseRegistryPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretMetaResponsePayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SecretMetaResponseCertificatePayload != nil {
		return obj.SecretMetaResponseCertificatePayload
	}

	if obj.SecretMetaResponseDek != nil {
		return obj.SecretMetaResponseDek
	}

	if obj.SecretMetaResponseRegistryPayload != nil {
		return obj.SecretMetaResponseRegistryPayload
	}

	// all schemas are nil
	return nil
}

type NullableSecretMetaResponsePayload struct {
	value *SecretMetaResponsePayload
	isSet bool
}

func (v NullableSecretMetaResponsePayload) Get() *SecretMetaResponsePayload {
	return v.value
}

func (v *NullableSecretMetaResponsePayload) Set(val *SecretMetaResponsePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretMetaResponsePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretMetaResponsePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretMetaResponsePayload(val *SecretMetaResponsePayload) *NullableSecretMetaResponsePayload {
	return &NullableSecretMetaResponsePayload{value: val, isSet: true}
}

func (v NullableSecretMetaResponsePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretMetaResponsePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


