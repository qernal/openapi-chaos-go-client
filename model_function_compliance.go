/*
Chaos

Central Management API - publicly exposed set of APIs for cloud resources

API version: 1.0.0
Contact: help@qernal.support
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"fmt"
)

// FunctionCompliance Tagged requirements for compliance; soc2 = SOC2 compliant data centers ipv6 = Function can work within an ipv6 *only* cluster 
type FunctionCompliance string

// List of FunctionCompliance
const (
	FUNCTIONCOMPLIANCE_SOC2 FunctionCompliance = "soc2"
	FUNCTIONCOMPLIANCE_IPV6 FunctionCompliance = "ipv6"
)

// All allowed values of FunctionCompliance enum
var AllowedFunctionComplianceEnumValues = []FunctionCompliance{
	"soc2",
	"ipv6",
}

func (v *FunctionCompliance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FunctionCompliance(value)
	for _, existing := range AllowedFunctionComplianceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FunctionCompliance", value)
}

// NewFunctionComplianceFromValue returns a pointer to a valid FunctionCompliance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFunctionComplianceFromValue(v string) (*FunctionCompliance, error) {
	ev := FunctionCompliance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FunctionCompliance: valid values are %v", v, AllowedFunctionComplianceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FunctionCompliance) IsValid() bool {
	for _, existing := range AllowedFunctionComplianceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FunctionCompliance value
func (v FunctionCompliance) Ptr() *FunctionCompliance {
	return &v
}

type NullableFunctionCompliance struct {
	value *FunctionCompliance
	isSet bool
}

func (v NullableFunctionCompliance) Get() *FunctionCompliance {
	return v.value
}

func (v *NullableFunctionCompliance) Set(val *FunctionCompliance) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionCompliance) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionCompliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionCompliance(val *FunctionCompliance) *NullableFunctionCompliance {
	return &NullableFunctionCompliance{value: val, isSet: true}
}

func (v NullableFunctionCompliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionCompliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

