/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"fmt"
)

// HostVerificationStatus Host verification status
type HostVerificationStatus string

// List of HostVerificationStatus
const (
	HOSTVERIFICATIONSTATUS_PENDING HostVerificationStatus = "pending"
	HOSTVERIFICATIONSTATUS_ALREADY_VERIFIED HostVerificationStatus = "already_verified"
	HOSTVERIFICATIONSTATUS_COMPLETED HostVerificationStatus = "completed"
	HOSTVERIFICATIONSTATUS_FAILED HostVerificationStatus = "failed"
)

// All allowed values of HostVerificationStatus enum
var AllowedHostVerificationStatusEnumValues = []HostVerificationStatus{
	"pending",
	"already_verified",
	"completed",
	"failed",
}

func (v *HostVerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostVerificationStatus(value)
	for _, existing := range AllowedHostVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostVerificationStatus", value)
}

// NewHostVerificationStatusFromValue returns a pointer to a valid HostVerificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostVerificationStatusFromValue(v string) (*HostVerificationStatus, error) {
	ev := HostVerificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostVerificationStatus: valid values are %v", v, AllowedHostVerificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostVerificationStatus) IsValid() bool {
	for _, existing := range AllowedHostVerificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostVerificationStatus value
func (v HostVerificationStatus) Ptr() *HostVerificationStatus {
	return &v
}

type NullableHostVerificationStatus struct {
	value *HostVerificationStatus
	isSet bool
}

func (v NullableHostVerificationStatus) Get() *HostVerificationStatus {
	return v.value
}

func (v *NullableHostVerificationStatus) Set(val *HostVerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHostVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHostVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostVerificationStatus(val *HostVerificationStatus) *NullableHostVerificationStatus {
	return &NullableHostVerificationStatus{value: val, isSet: true}
}

func (v NullableHostVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

