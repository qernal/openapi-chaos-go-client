/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
)

// checks if the AuthTokenPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthTokenPatch{}

// AuthTokenPatch API auth token patch
type AuthTokenPatch struct {
	// Name of token
	Name *string `json:"name,omitempty"`
	// Token expiration duration in days. 0 - token will never expire
	ExpiryDuration *int32 `json:"expiry_duration,omitempty"`
}

// NewAuthTokenPatch instantiates a new AuthTokenPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthTokenPatch() *AuthTokenPatch {
	this := AuthTokenPatch{}
	return &this
}

// NewAuthTokenPatchWithDefaults instantiates a new AuthTokenPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthTokenPatchWithDefaults() *AuthTokenPatch {
	this := AuthTokenPatch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthTokenPatch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenPatch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthTokenPatch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthTokenPatch) SetName(v string) {
	o.Name = &v
}

// GetExpiryDuration returns the ExpiryDuration field value if set, zero value otherwise.
func (o *AuthTokenPatch) GetExpiryDuration() int32 {
	if o == nil || IsNil(o.ExpiryDuration) {
		var ret int32
		return ret
	}
	return *o.ExpiryDuration
}

// GetExpiryDurationOk returns a tuple with the ExpiryDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthTokenPatch) GetExpiryDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryDuration) {
		return nil, false
	}
	return o.ExpiryDuration, true
}

// HasExpiryDuration returns a boolean if a field has been set.
func (o *AuthTokenPatch) HasExpiryDuration() bool {
	if o != nil && !IsNil(o.ExpiryDuration) {
		return true
	}

	return false
}

// SetExpiryDuration gets a reference to the given int32 and assigns it to the ExpiryDuration field.
func (o *AuthTokenPatch) SetExpiryDuration(v int32) {
	o.ExpiryDuration = &v
}

func (o AuthTokenPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthTokenPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpiryDuration) {
		toSerialize["expiry_duration"] = o.ExpiryDuration
	}
	return toSerialize, nil
}

type NullableAuthTokenPatch struct {
	value *AuthTokenPatch
	isSet bool
}

func (v NullableAuthTokenPatch) Get() *AuthTokenPatch {
	return v.value
}

func (v *NullableAuthTokenPatch) Set(val *AuthTokenPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthTokenPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthTokenPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthTokenPatch(val *AuthTokenPatch) *NullableAuthTokenPatch {
	return &NullableAuthTokenPatch{value: val, isSet: true}
}

func (v NullableAuthTokenPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthTokenPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


