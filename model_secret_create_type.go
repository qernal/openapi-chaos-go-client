/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-chaos-client

import (
	"encoding/json"
	"fmt"
)

// SecretCreateType Secrets types: registry, certificate, environment
type SecretCreateType string

// List of SecretCreateType
const (
	REGISTRY SecretCreateType = "registry"
	CERTIFICATE SecretCreateType = "certificate"
	ENVIRONMENT SecretCreateType = "environment"
)

// All allowed values of SecretCreateType enum
var AllowedSecretCreateTypeEnumValues = []SecretCreateType{
	"registry",
	"certificate",
	"environment",
}

func (v *SecretCreateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretCreateType(value)
	for _, existing := range AllowedSecretCreateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretCreateType", value)
}

// NewSecretCreateTypeFromValue returns a pointer to a valid SecretCreateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretCreateTypeFromValue(v string) (*SecretCreateType, error) {
	ev := SecretCreateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretCreateType: valid values are %v", v, AllowedSecretCreateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretCreateType) IsValid() bool {
	for _, existing := range AllowedSecretCreateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecretCreateType value
func (v SecretCreateType) Ptr() *SecretCreateType {
	return &v
}

type NullableSecretCreateType struct {
	value *SecretCreateType
	isSet bool
}

func (v NullableSecretCreateType) Get() *SecretCreateType {
	return v.value
}

func (v *NullableSecretCreateType) Set(val *SecretCreateType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretCreateType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretCreateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretCreateType(val *SecretCreateType) *NullableSecretCreateType {
	return &NullableSecretCreateType{value: val, isSet: true}
}

func (v NullableSecretCreateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretCreateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

