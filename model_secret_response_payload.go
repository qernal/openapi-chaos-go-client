/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-chaos-client

import (
	"encoding/json"
	"fmt"
)

// SecretResponsePayload - struct for SecretResponsePayload
type SecretResponsePayload struct {
	SecretMetaResponseCertificatePayload *SecretMetaResponseCertificatePayload
	SecretMetaResponseRegistryPayload *SecretMetaResponseRegistryPayload
}

// SecretMetaResponseCertificatePayloadAsSecretResponsePayload is a convenience function that returns SecretMetaResponseCertificatePayload wrapped in SecretResponsePayload
func SecretMetaResponseCertificatePayloadAsSecretResponsePayload(v *SecretMetaResponseCertificatePayload) SecretResponsePayload {
	return SecretResponsePayload{
		SecretMetaResponseCertificatePayload: v,
	}
}

// SecretMetaResponseRegistryPayloadAsSecretResponsePayload is a convenience function that returns SecretMetaResponseRegistryPayload wrapped in SecretResponsePayload
func SecretMetaResponseRegistryPayloadAsSecretResponsePayload(v *SecretMetaResponseRegistryPayload) SecretResponsePayload {
	return SecretResponsePayload{
		SecretMetaResponseRegistryPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretResponsePayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SecretMetaResponseCertificatePayload
	err = newStrictDecoder(data).Decode(&dst.SecretMetaResponseCertificatePayload)
	if err == nil {
		jsonSecretMetaResponseCertificatePayload, _ := json.Marshal(dst.SecretMetaResponseCertificatePayload)
		if string(jsonSecretMetaResponseCertificatePayload) == "{}" { // empty struct
			dst.SecretMetaResponseCertificatePayload = nil
		} else {
			match++
		}
	} else {
		dst.SecretMetaResponseCertificatePayload = nil
	}

	// try to unmarshal data into SecretMetaResponseRegistryPayload
	err = newStrictDecoder(data).Decode(&dst.SecretMetaResponseRegistryPayload)
	if err == nil {
		jsonSecretMetaResponseRegistryPayload, _ := json.Marshal(dst.SecretMetaResponseRegistryPayload)
		if string(jsonSecretMetaResponseRegistryPayload) == "{}" { // empty struct
			dst.SecretMetaResponseRegistryPayload = nil
		} else {
			match++
		}
	} else {
		dst.SecretMetaResponseRegistryPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SecretMetaResponseCertificatePayload = nil
		dst.SecretMetaResponseRegistryPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecretResponsePayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecretResponsePayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretResponsePayload) MarshalJSON() ([]byte, error) {
	if src.SecretMetaResponseCertificatePayload != nil {
		return json.Marshal(&src.SecretMetaResponseCertificatePayload)
	}

	if src.SecretMetaResponseRegistryPayload != nil {
		return json.Marshal(&src.SecretMetaResponseRegistryPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretResponsePayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SecretMetaResponseCertificatePayload != nil {
		return obj.SecretMetaResponseCertificatePayload
	}

	if obj.SecretMetaResponseRegistryPayload != nil {
		return obj.SecretMetaResponseRegistryPayload
	}

	// all schemas are nil
	return nil
}

type NullableSecretResponsePayload struct {
	value *SecretResponsePayload
	isSet bool
}

func (v NullableSecretResponsePayload) Get() *SecretResponsePayload {
	return v.value
}

func (v *NullableSecretResponsePayload) Set(val *SecretResponsePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretResponsePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretResponsePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretResponsePayload(val *SecretResponsePayload) *NullableSecretResponsePayload {
	return &NullableSecretResponsePayload{value: val, isSet: true}
}

func (v NullableSecretResponsePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretResponsePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


