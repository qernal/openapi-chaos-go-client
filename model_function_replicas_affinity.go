/*
Chaos

Central Management API - publicly exposed set of APIs for cloud resources

API version: 1.0.0
Contact: help@qernal.support
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FunctionReplicasAffinity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionReplicasAffinity{}

// FunctionReplicasAffinity Replica strategy
type FunctionReplicasAffinity struct {
	// If there are > 1 replica, make sure they're on different clusters
	Cluster bool `json:"cluster"`
	// If there are > 1 replica, make sure they're on different clouds
	Cloud bool `json:"cloud"`
}

type _FunctionReplicasAffinity FunctionReplicasAffinity

// NewFunctionReplicasAffinity instantiates a new FunctionReplicasAffinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionReplicasAffinity(cluster bool, cloud bool) *FunctionReplicasAffinity {
	this := FunctionReplicasAffinity{}
	this.Cluster = cluster
	this.Cloud = cloud
	return &this
}

// NewFunctionReplicasAffinityWithDefaults instantiates a new FunctionReplicasAffinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionReplicasAffinityWithDefaults() *FunctionReplicasAffinity {
	this := FunctionReplicasAffinity{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *FunctionReplicasAffinity) GetCluster() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *FunctionReplicasAffinity) GetClusterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *FunctionReplicasAffinity) SetCluster(v bool) {
	o.Cluster = v
}

// GetCloud returns the Cloud field value
func (o *FunctionReplicasAffinity) GetCloud() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value
// and a boolean to check if the value has been set.
func (o *FunctionReplicasAffinity) GetCloudOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cloud, true
}

// SetCloud sets field value
func (o *FunctionReplicasAffinity) SetCloud(v bool) {
	o.Cloud = v
}

func (o FunctionReplicasAffinity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionReplicasAffinity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["cloud"] = o.Cloud
	return toSerialize, nil
}

func (o *FunctionReplicasAffinity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"cloud",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionReplicasAffinity := _FunctionReplicasAffinity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFunctionReplicasAffinity)

	if err != nil {
		return err
	}

	*o = FunctionReplicasAffinity(varFunctionReplicasAffinity)

	return err
}

type NullableFunctionReplicasAffinity struct {
	value *FunctionReplicasAffinity
	isSet bool
}

func (v NullableFunctionReplicasAffinity) Get() *FunctionReplicasAffinity {
	return v.value
}

func (v *NullableFunctionReplicasAffinity) Set(val *FunctionReplicasAffinity) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionReplicasAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionReplicasAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionReplicasAffinity(val *FunctionReplicasAffinity) *NullableFunctionReplicasAffinity {
	return &NullableFunctionReplicasAffinity{value: val, isSet: true}
}

func (v NullableFunctionReplicasAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionReplicasAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


