/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type MetricsAPIMetricsAggregationsListRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	metricType string
	page *OrganisationsListPageParameter
	fProject *string
	fFunction *string
	fTimestamps *LogsListFTimestampsParameter
	fHistogramInterval *int32
}

// Query parameters for pagination
func (r MetricsAPIMetricsAggregationsListRequest) Page(page OrganisationsListPageParameter) MetricsAPIMetricsAggregationsListRequest {
	r.page = &page
	return r
}

// Project uuid reference
func (r MetricsAPIMetricsAggregationsListRequest) FProject(fProject string) MetricsAPIMetricsAggregationsListRequest {
	r.fProject = &fProject
	return r
}

// Function uuid reference
func (r MetricsAPIMetricsAggregationsListRequest) FFunction(fFunction string) MetricsAPIMetricsAggregationsListRequest {
	r.fFunction = &fFunction
	return r
}

// Timestamp restriction for query
func (r MetricsAPIMetricsAggregationsListRequest) FTimestamps(fTimestamps LogsListFTimestampsParameter) MetricsAPIMetricsAggregationsListRequest {
	r.fTimestamps = &fTimestamps
	return r
}

// Histogram interval
func (r MetricsAPIMetricsAggregationsListRequest) FHistogramInterval(fHistogramInterval int32) MetricsAPIMetricsAggregationsListRequest {
	r.fHistogramInterval = &fHistogramInterval
	return r
}

func (r MetricsAPIMetricsAggregationsListRequest) Execute() (*MetricsAggregationsList200Response, *http.Response, error) {
	return r.ApiService.MetricsAggregationsListExecute(r)
}

/*
MetricsAggregationsList Get metrics

Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.

> Note: Metrics are always returned in a descending order based on the timestamp.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metricType Metric aggregation type, types can be used with either a project or a function filter.  - httprequests: Aggregated HTTP requests - resourcestats: Aggregated resource stats (such as CPU, Memory and Network)  > Note: aggregations cannot return more than 300 data points 
 @return MetricsAPIMetricsAggregationsListRequest
*/
func (a *MetricsAPIService) MetricsAggregationsList(ctx context.Context, metricType string) MetricsAPIMetricsAggregationsListRequest {
	return MetricsAPIMetricsAggregationsListRequest{
		ApiService: a,
		ctx: ctx,
		metricType: metricType,
	}
}

// Execute executes the request
//  @return MetricsAggregationsList200Response
func (a *MetricsAPIService) MetricsAggregationsListExecute(r MetricsAPIMetricsAggregationsListRequest) (*MetricsAggregationsList200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetricsAggregationsList200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.MetricsAggregationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metrics/aggregations/{metric_type}"
	localVarPath = strings.Replace(localVarPath, "{"+"metric_type"+"}", url.PathEscape(parameterValueToString(r.metricType, "metricType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "deepObject", "")
	}
	if r.fProject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "f_project", r.fProject, "form", "")
	}
	if r.fFunction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "f_function", r.fFunction, "form", "")
	}
	if r.fTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "f_timestamps", r.fTimestamps, "deepObject", "")
	}
	if r.fHistogramInterval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "f_histogram_interval", r.fHistogramInterval, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
