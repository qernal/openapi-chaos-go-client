/*
Chaos

Central Management API - publicly exposed set of APIs for managing deployments

API version: 1.0.0
Contact: support@qernal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_chaos_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecretMetaResponseDek type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretMetaResponseDek{}

// SecretMetaResponseDek DEK secret, `type: dek`
type SecretMetaResponseDek struct {
	// Base64 encoded DEK public key
	Public string `json:"public"`
}

type _SecretMetaResponseDek SecretMetaResponseDek

// NewSecretMetaResponseDek instantiates a new SecretMetaResponseDek object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretMetaResponseDek(public string) *SecretMetaResponseDek {
	this := SecretMetaResponseDek{}
	this.Public = public
	return &this
}

// NewSecretMetaResponseDekWithDefaults instantiates a new SecretMetaResponseDek object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretMetaResponseDekWithDefaults() *SecretMetaResponseDek {
	this := SecretMetaResponseDek{}
	return &this
}

// GetPublic returns the Public field value
func (o *SecretMetaResponseDek) GetPublic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *SecretMetaResponseDek) GetPublicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *SecretMetaResponseDek) SetPublic(v string) {
	o.Public = v
}

func (o SecretMetaResponseDek) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretMetaResponseDek) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["public"] = o.Public
	return toSerialize, nil
}

func (o *SecretMetaResponseDek) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"public",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretMetaResponseDek := _SecretMetaResponseDek{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretMetaResponseDek)

	if err != nil {
		return err
	}

	*o = SecretMetaResponseDek(varSecretMetaResponseDek)

	return err
}

type NullableSecretMetaResponseDek struct {
	value *SecretMetaResponseDek
	isSet bool
}

func (v NullableSecretMetaResponseDek) Get() *SecretMetaResponseDek {
	return v.value
}

func (v *NullableSecretMetaResponseDek) Set(val *SecretMetaResponseDek) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretMetaResponseDek) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretMetaResponseDek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretMetaResponseDek(val *SecretMetaResponseDek) *NullableSecretMetaResponseDek {
	return &NullableSecretMetaResponseDek{value: val, isSet: true}
}

func (v NullableSecretMetaResponseDek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretMetaResponseDek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


