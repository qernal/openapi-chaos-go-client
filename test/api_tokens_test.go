/*
Chaos

Testing TokensApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi-chaos-client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi-chaos-client_TokensApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TokensApiService AuthTokensCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokensApi.AuthTokensCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService AuthTokensDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokensApi.AuthTokensDelete(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService AuthTokensGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokensApi.AuthTokensGet(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService AuthTokensList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TokensApi.AuthTokensList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TokensApiService AuthTokensUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenId string

		resp, httpRes, err := apiClient.TokensApi.AuthTokensUpdate(context.Background(), tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
