/*
Chaos

Testing OrganisationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi_chaos_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/qernal/openapi-chaos-go-client"
)

func Test_openapi_chaos_client_OrganisationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganisationsApiService OrganisationsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganisationsApi.OrganisationsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganisationsApiService OrganisationsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organisationId string

		resp, httpRes, err := apiClient.OrganisationsApi.OrganisationsDelete(context.Background(), organisationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganisationsApiService OrganisationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organisationId string

		resp, httpRes, err := apiClient.OrganisationsApi.OrganisationsGet(context.Background(), organisationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganisationsApiService OrganisationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganisationsApi.OrganisationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganisationsApiService OrganisationsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organisationId string

		resp, httpRes, err := apiClient.OrganisationsApi.OrganisationsUpdate(context.Background(), organisationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
