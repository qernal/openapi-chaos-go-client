/*
Chaos

Testing HostsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi_chaos_client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/qernal/openapi-chaos-go-client"
)

func Test_openapi_chaos_client_HostsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HostsAPIService ProjectsHostsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.HostsAPI.ProjectsHostsCreate(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService ProjectsHostsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var hostname string

		resp, httpRes, err := apiClient.HostsAPI.ProjectsHostsDelete(context.Background(), projectId, hostname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService ProjectsHostsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var hostname string

		resp, httpRes, err := apiClient.HostsAPI.ProjectsHostsGet(context.Background(), projectId, hostname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService ProjectsHostsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.HostsAPI.ProjectsHostsList(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService ProjectsHostsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var hostname string

		resp, httpRes, err := apiClient.HostsAPI.ProjectsHostsUpdate(context.Background(), projectId, hostname).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
