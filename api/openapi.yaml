openapi: 3.0.0
info:
  contact:
    email: support@qernal.com
  description: Central Management API - publicly exposed set of APIs for managing
    deployments
  title: Chaos
  version: 1.0.0
  x-logo:
    url: /assets/components/Chaos.png
    backgroundColor: '#FFFFFF'
    altText: Qernal Chaos
servers:
- description: Production
  url: https://chaos.qernal.com/v1
security:
- token: []
- cookie: []
tags:
- description: "Project operations, projects belong to an organisation"
  name: projects
- description: "Organisations are a hierarchy top-level for a user, they allow for\
    \ organising of projects"
  name: organisations
- description: "Secret operations for certificates, environment and container registry"
  name: secrets
- description: Auth tokens for third party clients
  name: tokens
- description: "Function operations, allows deployment of containers via the function\
    \ endpoints"
  name: functions
- description: List of providers you can use to deploy functions into and their available
    locations - this includes any private providers attached to your organisation
  name: providers
- description: Hosts attached to the project so make functions routeable via the internet
  name: hosts
paths:
  /organisations:
    get:
      description: List organisations
      operationId: organisations-list
      parameters:
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      - description: |
          Filter resource on name, if the value ends in an asterix it will be
          treated as a partial search otherwise, it'll be an exact match
        explode: true
        in: query
        name: f_name
        required: false
        schema:
          example: my-proj*
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationResponse'
          description: List organisations
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: List organisations
      tags:
      - organisations
    post:
      description: Create an organisation
      operationId: organisations-create
      requestBody:
        $ref: '#/components/requestBodies/OrganisationBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
          description: Get organisation
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
        "409":
          content:
            application/json:
              examples:
                generic-conflict-response:
                  value:
                    message: "Conflict, Resource already exists"
              schema:
                $ref: '#/components/schemas/ConflictResponse'
          description: Resource Conflict
      security:
      - token: []
      - cookie: []
      summary: Create organisations
      tags:
      - organisations
  /organisations/{organisation_id}:
    delete:
      description: "Delete organisation, this will also delete all the resources within\
        \ the organisation"
      operationId: organisations-delete
      parameters:
      - description: Organisation ID reference
        explode: false
        in: path
        name: organisation_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Delete an organisation
      tags:
      - organisations
    get:
      description: Get a single organisation
      operationId: organisations-get
      parameters:
      - description: Organisation ID reference
        explode: false
        in: path
        name: organisation_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
          description: Get organisation
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Get an organisation
      tags:
      - organisations
    put:
      description: Update an organisation
      operationId: organisations-update
      parameters:
      - description: Organisation ID reference
        explode: false
        in: path
        name: organisation_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/OrganisationBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationResponse'
          description: Get organisation
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Update an organisation
      tags:
      - organisations
  /organisations/{organisation_id}/projects:
    get:
      description: Get all the projects linked to a specific organisation
      operationId: organisations-projects-list
      parameters:
      - description: Organisation ID reference
        explode: false
        in: path
        name: organisation_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectResponse'
          description: List projects
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Get all projects within an organisation
      tags:
      - projects
  /projects:
    get:
      description: "Get all projects for this user, paginated"
      operationId: projects-list
      parameters:
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      - description: |
          Filter resource on name, if the value ends in an asterix it will be
          treated as a partial search otherwise, it'll be an exact match
        explode: true
        in: query
        name: f_name
        required: false
        schema:
          example: my-proj*
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectResponse'
          description: List projects
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: List projects
      tags:
      - projects
    post:
      description: Create a new project
      operationId: projects-create
      requestBody:
        $ref: '#/components/requestBodies/ProjectBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: Get project
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
        "409":
          content:
            application/json:
              examples:
                generic-conflict-response:
                  value:
                    message: "Conflict, Resource already exists"
              schema:
                $ref: '#/components/schemas/ConflictResponse'
          description: Resource Conflict
      security:
      - token: []
      - cookie: []
      summary: Create project
      tags:
      - projects
  /projects/{project_id}:
    delete:
      description: "Delete project, this will also delete all the resources within\
        \ the project"
      operationId: projects-delete
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Delete project
      tags:
      - projects
    get:
      description: Get a specific project
      operationId: projects-get
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: Get project
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Get project
      tags:
      - projects
    put:
      description: Update project
      operationId: projects-update
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ProjectBodyPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
          description: Get project
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Update project
      tags:
      - projects
  /projects/{project_id}/secrets:
    get:
      description: List project secrets of a specific type
      operationId: projects-secrets-list
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      - description: Type of secret to filter on
        explode: true
        in: query
        name: secret_type
        required: false
        schema:
          $ref: '#/components/schemas/SecretMetaType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretResponse'
          description: List secrets
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: List project secrets of a specific type
      tags:
      - secrets
    post:
      description: Create a new project secret
      operationId: projects-secrets-create
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SecretBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
          description: Get secret
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
        "409":
          content:
            application/json:
              examples:
                generic-conflict-response:
                  value:
                    message: "Conflict, Resource already exists"
              schema:
                $ref: '#/components/schemas/ConflictResponse'
          description: Resource Conflict
      security:
      - token: []
      - cookie: []
      summary: Create project secret
      tags:
      - secrets
  /projects/{project_id}/secrets/{secret_name}:
    delete:
      description: "Delete project secret, if the secret is still linked to an active/deployed\
        \ function - it cannot be removed"
      operationId: projects-secrets-delete
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Unique secret name
        explode: false
        in: path
        name: secret_name
        required: true
        schema:
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Delete project secret
      tags:
      - secrets
    get:
      description: Get a specific project
      operationId: projects-secrets-get
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Unique secret name
        explode: false
        in: path
        name: secret_name
        required: true
        schema:
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                secret-meta-registry:
                  value:
                    name: FIRST_SECRET
                    type: registry
                    payload:
                      registry: ghcr.io
                    date:
                      created_at: 2023-07-22T14:50:13Z20230722T145013Z
                      updated_at: 2023-07-22T14:50:13Z20230722T145013Z
                secret-meta-certificate:
                  value:
                    name: FIRST_SECRET
                    type: certificate
                    payload:
                      domain: ghcr.io
                    date:
                      created_at: 2023-07-22T14:50:13Z20230722T145013Z
                      updated_at: 2023-07-22T14:50:13Z20230722T145013Z
                secret-meta-environment:
                  value:
                    name: FIRST_SECRET
                    type: enviornment
                    payload:
                      env: MY_SECRET_NAME
                    date:
                      created_at: 2023-07-22T14:50:13Z20230722T145013Z
                      updated_at: 2023-07-22T14:50:13Z20230722T145013Z
              schema:
                $ref: '#/components/schemas/SecretMetaResponse'
          description: Get secret metadata
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Get project secret
      tags:
      - secrets
    put:
      description: Update project
      operationId: projects-secrets-update
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Unique secret name
        explode: false
        in: path
        name: secret_name
        required: true
        schema:
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/SecretBodyPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
          description: Get secret
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "403":
          content:
            application/json:
              examples:
                generic-unauthorised-response:
                  value:
                    message: Unauthorised
              schema:
                $ref: '#/components/schemas/UnauthorisedResponse'
          description: Unauthorised
      security:
      - token: []
      - cookie: []
      summary: Update project secret
      tags:
      - secrets
  /projects/{project_id}/hosts:
    get:
      operationId: projects-hosts-list
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHosts'
          description: List of project hosts
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: List hosts for project
      tags:
      - hosts
    post:
      description: |
        Assign a host/domain to a project - hosts are globally unique and require verification, so a host cannot be assigned to multiple projects.

        A host can be a valid domain, either a root domain or a subdomain.
      operationId: projects-hosts-create
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/HostBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: Porject host
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "409":
          content:
            application/json:
              examples:
                generic-conflict-response:
                  value:
                    message: "Conflict, Resource already exists"
              schema:
                $ref: '#/components/schemas/ConflictResponse'
          description: Resource Conflict
      security:
      - token: []
      - cookie: []
      summary: Create host for project
      tags:
      - hosts
  /projects/{project_id}/hosts/{hostname}:
    delete:
      operationId: projects-hosts-delete
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Hostname
        explode: false
        in: path
        name: hostname
        required: true
        schema:
          example: example-domain.com
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Delete specific host by hostname
      tags:
      - hosts
    get:
      operationId: projects-hosts-get
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Hostname
        explode: false
        in: path
        name: hostname
        required: true
        schema:
          example: example-domain.com
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: Porject host
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Get specific host by hostname
      tags:
      - hosts
    put:
      operationId: projects-hosts-update
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Hostname
        explode: false
        in: path
        name: hostname
        required: true
        schema:
          example: example-domain.com
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/HostBodyPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: Porject host
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Update specific host by hostname
      tags:
      - hosts
  /projects/{project_id}/hosts/{hostname}/verify:
    post:
      operationId: projects-hosts-verify-create
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Hostname
        explode: false
        in: path
        name: hostname
        required: true
        schema:
          example: example-domain.com
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          description: Porject host
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: Schedule host verification task
      tags:
      - hosts
  /auth/tokens:
    get:
      operationId: auth-tokens-list
      parameters:
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuthTokens'
          description: List of auth token meta
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: List all user auth tokens
      tags:
      - tokens
    post:
      description: |
        Create new auth token for use with the CLI and TF Provider

        ### Warning
        The `token` field is only shown once and can't be retrieved again without generating a new token. Securely save this once the response has been received.
      operationId: auth-tokens-create
      requestBody:
        $ref: '#/components/requestBodies/AuthTokenBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: Generated token response
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: Create new auth token
      tags:
      - tokens
  /auth/tokens/{token_id}:
    delete:
      operationId: auth-tokens-delete
      parameters:
      - description: Token ID reference
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Delete token
      tags:
      - tokens
    get:
      operationId: auth-tokens-get
      parameters:
      - description: Token ID reference
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenMeta'
          description: Token meta information
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: Get token information
      tags:
      - tokens
    put:
      operationId: auth-tokens-update
      parameters:
      - description: Token ID reference
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/AuthTokenPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: Generated token response
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: Update token
      tags:
      - tokens
  /projects/{project_id}/functions:
    get:
      description: List all functions
      operationId: projects-functions-list
      parameters:
      - description: Project ID reference
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunction'
          description: List all functions (paginated)
      security:
      - token: []
      - cookie: []
      summary: List all functions within a project
      tags:
      - functions
  /functions:
    post:
      description: Create a new function
      operationId: functions-create
      requestBody:
        $ref: '#/components/requestBodies/FunctionBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Get specific function
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
      security:
      - token: []
      - cookie: []
      summary: Create function
      tags:
      - functions
  /functions/{function_id}:
    delete:
      description: Delete a function (and all revisions)
      operationId: functions-delete
      parameters:
      - description: Function ID reference
        explode: false
        in: path
        name: function_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                generic-deleted-response:
                  value:
                    message: Resource deleted
              schema:
                $ref: '#/components/schemas/DeletedResponse'
          description: Resource deleted
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Delete function
      tags:
      - functions
    get:
      description: Get a specific function (latest revision)
      operationId: functions-get
      parameters:
      - description: Function ID reference
        explode: false
        in: path
        name: function_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Get specific function
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Get function (latest revision)
      tags:
      - functions
    put:
      description: Update a function (creates a new revision)
      operationId: functions-update
      parameters:
      - description: Function ID reference
        explode: false
        in: path
        name: function_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/FunctionBodyPatch'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Get specific function
        "400":
          content:
            application/json:
              examples:
                generic-bad-request-response:
                  value:
                    message: Missing fields
                    fields:
                      generic_field: Valid field required
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
          description: Resource Bad Request
        "404":
          content:
            application/json:
              examples:
                generic-not-found-response:
                  value:
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
          description: Resource Not Found
      security:
      - token: []
      - cookie: []
      summary: Update function
      tags:
      - functions
  /functions/{function_id}/revisions:
    get:
      description: List all revisions for a function
      operationId: functions-revisions-list
      parameters:
      - description: Function ID reference
        explode: false
        in: path
        name: function_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunction'
          description: List all functions (paginated)
      security:
      - token: []
      - cookie: []
      summary: List all revisions for a function
      tags:
      - functions
  /functions/{function_id}/revisions/{function_revision_id}:
    get:
      description: Get a specific revision of a function
      operationId: functions-revisions-get
      parameters:
      - description: Function ID reference
        explode: false
        in: path
        name: function_id
        required: true
        schema:
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      - description: Function revision ID reference
        explode: false
        in: path
        name: function_revision_id
        required: true
        schema:
          example: 0069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
          description: Get specific function
      security:
      - token: []
      - cookie: []
      summary: Get a specific revision of a function
      tags:
      - functions
  /providers:
    get:
      description: Retrieve a list of all providers with their respective deployed
        regions and cities.
      operationId: providers-list
      parameters:
      - description: Query parameters for pagination
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/organisations_list_page_parameter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProviderResponse'
          description: List providers
      security:
      - token: []
      - cookie: []
      summary: Get available providers
      tags:
      - providers
components:
  parameters:
    pagination_page:
      description: Query parameters for pagination
      explode: true
      in: query
      name: page
      required: false
      schema:
        $ref: '#/components/schemas/organisations_list_page_parameter'
      style: deepObject
    organisation_id:
      description: Organisation ID reference
      explode: false
      in: path
      name: organisation_id
      required: true
      schema:
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        format: uuid
        type: string
      style: simple
    project_id:
      description: Project ID reference
      explode: false
      in: path
      name: project_id
      required: true
      schema:
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        format: uuid
        type: string
      style: simple
    secret_type:
      description: Type of secret to filter on
      explode: true
      in: query
      name: secret_type
      required: false
      schema:
        $ref: '#/components/schemas/SecretMetaType'
      style: form
    secret_name:
      description: Unique secret name
      explode: false
      in: path
      name: secret_name
      required: true
      schema:
        example: MY_SECRET
        minLength: 1
        pattern: "^[A-Z_]+$"
        type: string
      style: simple
    token_id:
      description: Token ID reference
      explode: false
      in: path
      name: token_id
      required: true
      schema:
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        format: uuid
        type: string
      style: simple
    hostname:
      description: Hostname
      explode: false
      in: path
      name: hostname
      required: true
      schema:
        example: example-domain.com
        type: string
      style: simple
    function_id:
      description: Function ID reference
      explode: false
      in: path
      name: function_id
      required: true
      schema:
        example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        format: uuid
        type: string
      style: simple
    function_revision_id:
      description: Function revision ID reference
      explode: false
      in: path
      name: function_revision_id
      required: true
      schema:
        example: 0069614e-adc8-47cb-a69c-decf9c5f90fc
        format: uuid
        type: string
      style: simple
    filter_name:
      description: |
        Filter resource on name, if the value ends in an asterix it will be
        treated as a partial search otherwise, it'll be an exact match
      explode: true
      in: query
      name: f_name
      required: false
      schema:
        example: my-proj*
        type: string
      style: form
  requestBodies:
    HostBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HostBody'
      required: true
    HostBodyPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HostBodyPatch'
      required: true
    AuthTokenBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthTokenBody'
      required: true
    AuthTokenPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthTokenPatch'
      required: true
    OrganisationBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganisationBody'
      description: Create/Update any field
    ProjectBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectBody'
      description: Create/Update any field
    ProjectBodyPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectBodyPatch'
      description: Update any field
    SecretBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretBody'
      description: |
        Create/Update any field

        The example generated may only be for one
        of the secret types, look towards the payload section of the schema
        for further fields, values and examples.
      required: true
    SecretBodyPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretBodyPatch'
      description: Update any field
      required: true
    FunctionBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FunctionBody'
      description: Create/Update any field
      required: true
    FunctionBodyPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Function'
      description: Update any field
      required: true
  responses:
    NoContent:
      description: The resources were updated successfully
    Unauthorised:
      content:
        application/json:
          examples:
            generic-unauthorised-response:
              value:
                message: Unauthorised
          schema:
            $ref: '#/components/schemas/UnauthorisedResponse'
      description: Unauthorised
    ResourceNotFound:
      content:
        application/json:
          examples:
            generic-not-found-response:
              value:
                message: Resource not found
          schema:
            $ref: '#/components/schemas/NotFoundResponse'
      description: Resource Not Found
    ResourceConflict:
      content:
        application/json:
          examples:
            generic-conflict-response:
              value:
                message: "Conflict, Resource already exists"
          schema:
            $ref: '#/components/schemas/ConflictResponse'
      description: Resource Conflict
    ResourceDeleted:
      content:
        application/json:
          examples:
            generic-deleted-response:
              value:
                message: Resource deleted
          schema:
            $ref: '#/components/schemas/DeletedResponse'
      description: Resource deleted
    BadRequest:
      content:
        application/json:
          examples:
            generic-bad-request-response:
              value:
                message: Missing fields
                fields:
                  generic_field: Valid field required
          schema:
            $ref: '#/components/schemas/BadRequestResponse'
      description: Resource Bad Request
    Host:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Host'
      description: Porject host
    ListHosts:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListHosts'
      description: List of project hosts
    AuthToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthToken'
      description: Generated token response
    AuthTokenMeta:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthTokenMeta'
      description: Token meta information
    AuthTokenList:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListAuthTokens'
      description: List of auth token meta
    ListOrganisations:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListOrganisationResponse'
      description: List organisations
    Organisation:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganisationResponse'
      description: Get organisation
    ListProjects:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListProjectResponse'
      description: List projects
    Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectResponse'
      description: Get project
    ListSecrets:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListSecretResponse'
      description: List secrets
    Secret:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SecretResponse'
      description: Get secret
    SecretMeta:
      content:
        application/json:
          examples:
            secret-meta-registry:
              value:
                name: FIRST_SECRET
                type: registry
                payload:
                  registry: ghcr.io
                date:
                  created_at: 2023-07-22T14:50:13Z20230722T145013Z
                  updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            secret-meta-certificate:
              value:
                name: FIRST_SECRET
                type: certificate
                payload:
                  domain: ghcr.io
                date:
                  created_at: 2023-07-22T14:50:13Z20230722T145013Z
                  updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            secret-meta-environment:
              value:
                name: FIRST_SECRET
                type: enviornment
                payload:
                  env: MY_SECRET_NAME
                date:
                  created_at: 2023-07-22T14:50:13Z20230722T145013Z
                  updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          schema:
            $ref: '#/components/schemas/SecretMetaResponse'
      description: Get secret metadata
    ListFunction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListFunction'
      description: List all functions (paginated)
    Function:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Function'
      description: Get specific function
    ListProvider:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListProviderResponse'
      description: List providers
  schemas:
    NotFoundResponse:
      description: Resource not found
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    UnauthorisedResponse:
      description: Unauthorised
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    BadRequestResponse:
      description: Bad request
      example:
        message: message
        fields:
          email: email
      properties:
        message:
          type: string
        fields:
          $ref: '#/components/schemas/BadRequestResponse_fields'
      required:
      - fields
      - message
      type: object
    ConflictResponse:
      description: Conflict Response
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    DeletedResponse:
      description: Deleted Response
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    Date:
      description: Object date information
      example:
        updated_at: 2023-07-22T14:50:13Z20230722T145013Z
        created_at: 2023-07-22T14:50:13Z20230722T145013Z
      properties:
        created_at:
          description: UTC creation datetime (ISO 8601 date format)
          example: 2023-07-22T14:50:13Z20230722T145013Z
          format: datetime
          type: string
        updated_at:
          description: UTC update datetime (ISO 8601 date format)
          example: 2023-07-22T14:50:13Z20230722T145013Z
          format: datetime
          type: string
      required:
      - created_at
      - updated_at
      type: object
    HostVerificationStatus:
      description: Host verification status
      enum:
      - pending
      - already_verified
      - completed
      - failed
      example: pending
      type: string
    Host:
      description: Host response
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        read_only: true
        verified_at: 2023-07-22T14:50:13Z20230722T145013Z
        host: example-domain.com
        certificate: projects:secrets/MY_CERT
        disabled: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        txt_verification: qernal=my.app=KSjfasiqwePdsakm12kdas3
        verification_status: pending
      properties:
        id:
          description: Host id
          format: uuid
          type: string
        host:
          description: "Hostname, this can be the root of a domain or a subdomain"
          example: example-domain.com
          minLength: 1
          type: string
        certificate:
          description: The secret reference to the certificate
          example: projects:secrets/MY_CERT
          pattern: "^projects\\:secrets/(?<secret_name>[A-Z0-9_]+)$"
          type: string
        project_id:
          description: Project ID this is attached to
          format: uuid
          minLength: 1
          type: string
        read_only:
          description: "If the host is read only and cannot be removed, primarily\
            \ used for *.qrnl.app domains"
          type: boolean
        disabled:
          description: "If the host is disabled, then this host won't be accessible\
            \ and so the deployments will not be routable"
          type: boolean
        txt_verification:
          description: "TXT record of host to verify ownership - if this record is\
            \ removed, it may become unverified as this is checked periodically to\
            \ continually verify ownership"
          example: qernal=my.app=KSjfasiqwePdsakm12kdas3
          type: string
        verified_at:
          description: UTC datetime when the host was verified (ISO 8601 date format).
          example: 2023-07-22T14:50:13Z20230722T145013Z
          format: datetime
          type: string
        date:
          $ref: '#/components/schemas/Date'
        verification_status:
          $ref: '#/components/schemas/HostVerificationStatus'
      required:
      - date
      - disabled
      - host
      - id
      - project_id
      - read_only
      - txt_verification
      - verification_status
      type: object
    ListHosts:
      description: List of projects hosts
      example:
        data:
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          read_only: true
          verified_at: 2023-07-22T14:50:13Z20230722T145013Z
          host: example-domain.com
          certificate: projects:secrets/MY_CERT
          disabled: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          txt_verification: qernal=my.app=KSjfasiqwePdsakm12kdas3
          verification_status: pending
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          project_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          read_only: true
          verified_at: 2023-07-22T14:50:13Z20230722T145013Z
          host: example-domain.com
          certificate: projects:secrets/MY_CERT
          disabled: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          txt_verification: qernal=my.app=KSjfasiqwePdsakm12kdas3
          verification_status: pending
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/Host'
          type: array
      required:
      - data
      - meta
      type: object
    HostBody:
      description: Host body
      example:
        host: example-domain.com
        certificate: projects:secrets/MY_CERT
        disabled: true
      properties:
        host:
          description: "Hostname, this can be the root of a domain or a subdomain"
          example: example-domain.com
          minLength: 1
          type: string
        certificate:
          description: The secret reference to the certificate
          example: projects:secrets/MY_CERT
          pattern: "^projects\\:secrets/(?<secret_name>[A-Z0-9_]+)$"
          type: string
        disabled:
          description: "If the host is disabled, then this host won't be accessible\
            \ and so the deployments will not be routable"
          type: boolean
      required:
      - certificate
      - disabled
      - host
      type: object
    HostBodyPatch:
      description: Host body update
      example:
        certificate: projects:secrets/MY_CERT
        disabled: true
      properties:
        certificate:
          description: The secret reference to the certificate
          example: projects:secrets/MY_CERT
          pattern: "^projects\\:secrets/(?<secret_name>[A-Z0-9_]+)$"
          type: string
        disabled:
          description: "If the host is disabled, then this host won't be accessible\
            \ and so the deployments will not be routable"
          type: boolean
      type: object
    AuthTokenBody:
      description: API auth token create
      example:
        name: tf-token
        expiry_duration: 90
      properties:
        name:
          description: Name of token
          example: tf-token
          pattern: "^[A-z-]+$"
          type: string
        expiry_duration:
          description: Token expiration duration in days. 0 - token will never expire
          example: 90
          type: integer
      required:
      - expiry_duration
      - name
      type: object
    AuthTokenPatch:
      description: API auth token patch
      example:
        name: tf-token
        expiry_duration: 90
      properties:
        name:
          description: Name of token
          example: tf-token
          pattern: "^[A-z-]+$"
          type: string
        expiry_duration:
          description: Token expiration duration in days. 0 - token will never expire
          example: 90
          type: integer
    AuthToken:
      description: API auth token
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        user_id: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name: TF Token
        id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        expiry_at: 2023-07-22T14:50:13Z20230722T145013Z
        token: 51687d2f-07b0-4260-8ecb-f5098305fdd4@T.KcV~_96jfOoD5ixFP8qu0Spm
      properties:
        id:
          description: Auth token uuid
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        user_id:
          description: User
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
          format: uuid
          type: string
        name:
          description: Name of token
          example: TF Token
          type: string
        expiry_at:
          description: When the token expires
          example: 2023-07-22T14:50:13Z20230722T145013Z
          format: datetime
          type: string
        token:
          description: "Combined token required for requesting an access token, this\
            \ field is only returned once on creation or update (during regeneration)."
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4@T.KcV~_96jfOoD5ixFP8qu0Spm
          type: string
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - id
      - name
      - user_id
      type: object
    AuthTokenMeta:
      description: API auth token meta
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        user_id: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
        name: TF Token
        id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        expiry_at: 2023-07-22T14:50:13Z20230722T145013Z
      properties:
        id:
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        user_id:
          description: User
          example: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
          format: uuid
          type: string
        name:
          description: Name of token
          example: TF Token
          type: string
        expiry_at:
          example: 2023-07-22T14:50:13Z20230722T145013Z
          format: datetime
          type: string
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - id
      - name
      - user_id
      type: object
    ListAuthTokens:
      description: List of auth tokens
      example:
        data:
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          user_id: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
          name: TF Token
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          expiry_at: 2023-07-22T14:50:13Z20230722T145013Z
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          user_id: a01594c7-3ebf-4ad1-8565-a7895e9c2d49
          name: TF Token
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          expiry_at: 2023-07-22T14:50:13Z20230722T145013Z
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/AuthTokenMeta'
          type: array
      required:
      - data
      - meta
      type: object
    PaginationMeta:
      description: Meta object for pagination use
      example:
        pages: 20
        start: 20
        end: 40
        links:
          next: "/{url}?page[after]=40&page[size]=20"
          prev: "/{url}?page[before]=20&page[size]=20"
        results: 200
      properties:
        results:
          example: 200
          type: integer
        start:
          example: 20
          type: integer
        end:
          example: 40
          type: integer
        pages:
          example: 20
          type: integer
        links:
          $ref: '#/components/schemas/PaginationLinks'
      required:
      - end
      - links
      - pages
      - results
      - start
      type: object
    PaginationLinks:
      description: Links object for pagination use
      example:
        next: "/{url}?page[after]=40&page[size]=20"
        prev: "/{url}?page[before]=20&page[size]=20"
      properties:
        prev:
          example: "/{url}?page[before]=20&page[size]=20"
          minLength: 1
          type: string
        next:
          example: "/{url}?page[after]=40&page[size]=20"
          minLength: 1
          type: string
      required:
      - next
      - prev
      type: object
    OrganisationResponse:
      description: Organisation response
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        user_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name: my-org
        id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      properties:
        id:
          description: Organisation id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        user_id:
          description: User id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        name:
          description: Organisation name
          example: my-org
          minLength: 1
          pattern: "^[A-z-]+$"
          type: string
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - id
      - name
      - user_id
      type: object
    ListOrganisationResponse:
      description: List organisations schema
      example:
        data:
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          user_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          name: my-org
          id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          user_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          name: my-org
          id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/OrganisationResponse'
          type: array
      required:
      - data
      - meta
      type: object
    OrganisationBody:
      description: Organisation body
      example:
        name: my-org
      properties:
        name:
          description: Organisation name
          example: my-org
          minLength: 1
          pattern: "^[A-z-]+$"
          type: string
      required:
      - name
      type: object
    ListProjectResponse:
      description: List of projects
      example:
        data:
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          org_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          name: first-api
          id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          org_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          name: first-api
          id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/ProjectResponse'
          type: array
      required:
      - data
      - meta
      type: object
    ProjectResponse:
      description: Project response
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        org_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name: first-api
        id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
      properties:
        id:
          description: Project id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        org_id:
          description: Organisation id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        name:
          description: Project name
          example: first-api
          minLength: 1
          pattern: "^[A-z-]+$"
          type: string
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - id
      - name
      - org_id
      type: object
    ProjectBody:
      description: Project body
      example:
        org_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name: first-api
      properties:
        org_id:
          description: Organisation id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        name:
          description: Project name
          example: first-api
          minLength: 1
          pattern: "^[A-z-]+$"
          type: string
      required:
      - name
      - org_id
      type: object
    ProjectBodyPatch:
      description: Project patch fields
      example:
        org_id: 3069614e-adc8-47cb-a69c-decf9c5f90fc
        name: first-api
      properties:
        org_id:
          description: Organisation id
          example: 3069614e-adc8-47cb-a69c-decf9c5f90fc
          format: uuid
          minLength: 1
          type: string
        name:
          description: Project name
          example: first-api
          minLength: 1
          pattern: "^[A-z-]+$"
          type: string
      type: object
    ListSecretResponse:
      description: List of secrets
      example:
        data:
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          payload:
            certificate: <x509 content>
          name: MY_SECRET
          type: registry
          revision: 32
        - date:
            updated_at: 2023-07-22T14:50:13Z20230722T145013Z
            created_at: 2023-07-22T14:50:13Z20230722T145013Z
          payload:
            certificate: <x509 content>
          name: MY_SECRET
          type: registry
          revision: 32
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/SecretMetaResponse'
          type: array
      required:
      - data
      - meta
      type: object
    SecretResponse:
      description: Secret response
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        payload:
          certificate: <x509 content>
        name: MY_SECRET
        type: registry
        revision: 32
      properties:
        name:
          description: Secret name
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        type:
          $ref: '#/components/schemas/SecretCreateType'
        payload:
          $ref: '#/components/schemas/SecretResponse_payload'
        revision:
          description: Secret revision
          example: 32
          type: integer
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - name
      - revision
      - type
      type: object
    SecretMetaType:
      description: "Secrets types: registry, certificate, environment, dek"
      enum:
      - registry
      - certificate
      - environment
      - dek
      example: registry
      type: string
    SecretMetaResponse:
      description: Secret metadata response
      example:
        date:
          updated_at: 2023-07-22T14:50:13Z20230722T145013Z
          created_at: 2023-07-22T14:50:13Z20230722T145013Z
        payload:
          certificate: <x509 content>
        name: MY_SECRET
        type: registry
        revision: 32
      properties:
        name:
          description: Secret name
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        type:
          $ref: '#/components/schemas/SecretMetaType'
        payload:
          $ref: '#/components/schemas/SecretMetaResponse_payload'
        revision:
          description: Secret revision
          example: 32
          type: integer
        date:
          $ref: '#/components/schemas/Date'
      required:
      - date
      - name
      - revision
      - type
      type: object
    SecretMetaResponseCertificatePayload:
      description: Secret metadata certificate payload
      example:
        certificate: <x509 content>
      properties:
        certificate:
          description: Public SSL certificate
          example: <x509 content>
          format: string
          minLength: 1
          type: string
      required:
      - certificate
      type: object
    SecretMetaResponseRegistryPayload:
      description: Secret metadata registry payload
      properties:
        registry:
          description: |
            Private registry domain/location, when using the private docker hub registry sepcify `docker.io`
            > Without http scheme
          example: ghcr.io
          format: hostname
          type: string
      required:
      - registry
      type: object
    SecretMetaResponseDek:
      description: "DEK secret, `type: dek`"
      properties:
        public:
          description: Base64 encoded DEK public key
          type: string
      required:
      - public
      type: object
    SecretCreatePayload:
      description: Payload for secret
      oneOf:
      - $ref: '#/components/schemas/SecretRegistry'
      - $ref: '#/components/schemas/SecretEnvironment'
      - $ref: '#/components/schemas/SecretCertificate'
      type: object
    SecretCreateType:
      description: "Secrets types: registry, certificate, environment"
      enum:
      - registry
      - certificate
      - environment
      example: registry
      type: string
    SecretEnvironment:
      description: "Encrypted ENV secret, `type: environment`"
      properties:
        environment_value:
          description: "Encrypted environment pairs (key - env key, value - env value)"
          example: SGVsbG8gd29ybGQ=
          format: base64
          type: string
      required:
      - environment_value
      type: object
    SecretCertificate:
      description: "Encrypted SSL private key and plain certificate. Certificate expected\
        \ in x509 pem format, key expected in pkcs8 or pkcs1 pem format. `type: certificate`"
      properties:
        certificate:
          description: Public certificate
          example: <x509 certificate pem format>
          type: string
        certificate_value:
          description: Encrypted certificate private key
          example: <base64 encrypted pkcs8 or pkcs1 pem format>
          format: base64
          type: string
      required:
      - certificate
      - certificate_value
      type: object
    SecretRegistry:
      description: "Encrypted private container registry, `type: registry`"
      example:
        registry: ghcr.io
        registry_value: SGVsbG8gd29ybGQ=
      properties:
        registry:
          description: |
            Private registry domain/location, when using the private docker hub registry sepcify `docker.io`
            > Without http scheme
          example: ghcr.io
          format: hostname
          type: string
        registry_value:
          description: Token used for auth to the registry
          example: SGVsbG8gd29ybGQ=
          format: base64
          type: string
      required:
      - registry
      - registry_value
      type: object
    SecretBody:
      description: Secret body
      example:
        encryption: keys/dek/123
        payload:
          registry: ghcr.io
          registry_value: SGVsbG8gd29ybGQ=
        name: MY_SECRET
        type: registry
      properties:
        name:
          description: Secret name
          example: MY_SECRET
          minLength: 1
          pattern: "^[A-Z_]+$"
          type: string
        type:
          $ref: '#/components/schemas/SecretCreateType'
        payload:
          $ref: '#/components/schemas/SecretCreatePayload'
        encryption:
          description: Encryption entity
          example: keys/dek/123
          pattern: "^keys\\/dek\\/[0-9]+$"
          type: string
      required:
      - encryption
      - name
      - payload
      - type
      type: object
    SecretBodyPatch:
      description: Secret body patch fields
      example:
        encryption: keys/dek/123
        payload:
          registry: ghcr.io
          registry_value: SGVsbG8gd29ybGQ=
        type: registry
      properties:
        type:
          $ref: '#/components/schemas/SecretCreateType'
        payload:
          $ref: '#/components/schemas/SecretCreatePayload'
        encryption:
          description: Encryption entity
          example: keys/dek/123
          pattern: "^keys\\/dek\\/[0-9]+$"
          type: string
      required:
      - encryption
      - payload
      - type
      type: object
    Location:
      description: Location of allowed clusters
      example:
        continent: EU
        country: GB
        city: London
        provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
      properties:
        provider_id:
          description: UUID of provider to deploy into
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        continent:
          description: Deployment continent
          example: EU
          type: string
        country:
          description: Deployment country
          example: GB
          type: string
        city:
          description: Deployment city
          example: London
          type: string
      required:
      - provider_id
      type: object
    FunctionScaling:
      description: Scaling logic
      example:
        high: 60
        low: 30
        type: cpu
      properties:
        type:
          description: CPU or Memory supported
          enum:
          - cpu
          - memory
          example: cpu
          type: string
        low:
          description: For type to drop below before scale down
          example: 30
          minLength: 1
          type: integer
        high:
          description: For type to go above before scale up
          example: 60
          minLength: 1
          type: integer
      required:
      - high
      - low
      - type
      type: object
    FunctionReplicas:
      description: Balancing logic
      example:
        min: 1
        max: 5
        affinity:
          cloud: true
          cluster: true
      properties:
        min:
          description: Minimum number of replicas to have
          example: 1
          minLength: 1
          type: integer
        max:
          description: Maximum number of replicas to have
          example: 5
          minLength: 1
          type: integer
        affinity:
          $ref: '#/components/schemas/FunctionReplicas_affinity'
      required:
      - affinity
      - max
      - min
      type: object
    FunctionEnv:
      description: Environment variable for function
      example:
        reference: project_id/secret_id@secret_revision
        name: MY_ENV_VAR
      properties:
        name:
          description: Key name
          example: MY_ENV_VAR
          type: string
        reference:
          description: Reference to the secret to use
          example: project_id/secret_id@secret_revision
          pattern: "^[0-9A-f-]{36}\\/[0-9A-f-]{36}\\@[0-9]+$"
          type: string
      required:
      - name
      - reference
      type: object
    FunctionCompliance:
      description: |
        Tagged requirements for compliance;
        soc2 = SOC2 compliant data centers
        ipv6 = Function can work within an ipv6 *only* cluster
      enum:
      - soc2
      - ipv6
      type: string
    FunctionType:
      description: "Type of function, worker types are not exposed to ingress routes"
      enum:
      - http
      - worker
      example: http
      type: string
    FunctionSize:
      description: "Size of function, required CPU and Memory"
      example:
        memory: 128
        cpu: 128
      properties:
        cpu:
          description: |
            CPU in 0.1 vCPU increments, for a whole vCPU specify 1024
            Must be in multiples of 128, with the same multiplier as memory
            from the base
          example: 128
          type: integer
        memory:
          description: |
            Memory in 128 MB increments, values are integer always in MB
            Must be in multiples of 128, with the same multiplier as CPU
            from the base
          example: 128
          type: integer
      required:
      - cpu
      - memory
      type: object
    FunctionDeployment:
      example:
        replicas:
          min: 1
          max: 5
          affinity:
            cloud: true
            cluster: true
        location:
          continent: EU
          country: GB
          city: London
          provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
      properties:
        id:
          description: ID of the deployment
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        location:
          $ref: '#/components/schemas/Location'
        replicas:
          $ref: '#/components/schemas/FunctionReplicas'
      required:
      - location
      - replicas
      type: object
    FunctionDeploymentBody:
      example:
        replicas:
          min: 1
          max: 5
          affinity:
            cloud: true
            cluster: true
        location:
          continent: EU
          country: GB
          city: London
          provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
      properties:
        location:
          $ref: '#/components/schemas/Location'
        replicas:
          $ref: '#/components/schemas/FunctionReplicas'
      required:
      - location
      - replicas
      type: object
    FunctionRoute:
      example:
        path: "/hello/{0-9+}"
        methods:
        - GET
        - POST
        weight: 50
      properties:
        path:
          description: Can be a regular expression
          example: "/hello/{0-9+}"
          minLength: 1
          type: string
        methods:
          description: HTTP Verb(s) for this function
          example:
          - GET
          - POST
          items:
            example: GET
            type: string
          type: array
        weight:
          description: The route weight for consideration
          example: 50
          minLength: 1
          type: integer
      required:
      - methods
      - path
      - weight
      type: object
    Function:
      description: Function
      example:
        image: docker.io/my-image:latest
        scaling:
          high: 60
          low: 30
          type: cpu
        description: My function does this
        type: http
        version: 1.0.0
        secrets:
        - reference: project_id/secret_id@secret_revision
          name: MY_ENV_VAR
        - reference: project_id/secret_id@secret_revision
          name: MY_ENV_VAR
        revision: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        routes:
        - path: "/hello/{0-9+}"
          methods:
          - GET
          - POST
          weight: 50
        - path: "/hello/{0-9+}"
          methods:
          - GET
          - POST
          weight: 50
        deployments:
        - replicas:
            min: 1
            max: 5
            affinity:
              cloud: true
              cluster: true
          location:
            continent: EU
            country: GB
            city: London
            provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        - replicas:
            min: 1
            max: 5
            affinity:
              cloud: true
              cluster: true
          location:
            continent: EU
            country: GB
            city: London
            provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        size:
          memory: 128
          cpu: 128
        project_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        port: 8080
        compliance:
        - null
        - null
        name: my-function
        id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
      properties:
        id:
          description: ID of the function
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          minLength: 1
          type: string
        project_id:
          description: ID of the project this function belongs to
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        version:
          description: Function spec version
          enum:
          - 1.0.0
          example: 1.0.0
          type: string
        name:
          description: Name of the function
          example: my-function
          minLength: 1
          type: string
        description:
          description: Description of what the function does
          example: My function does this
          type: string
        image:
          description: Path to container image
          example: docker.io/my-image:latest
          minLength: 1
          type: string
        revision:
          description: Function revision
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/FunctionType'
        size:
          $ref: '#/components/schemas/FunctionSize'
        port:
          description: Port the application runs on
          example: 8080
          type: integer
        routes:
          description: "The public route/path to this function, only applicable to\
            \ http type functions"
          items:
            $ref: '#/components/schemas/FunctionRoute'
          type: array
        scaling:
          $ref: '#/components/schemas/FunctionScaling'
        deployments:
          description: List of deployments for this function
          items:
            $ref: '#/components/schemas/FunctionDeployment'
          type: array
        secrets:
          description: List of environment variables for secrets
          items:
            $ref: '#/components/schemas/FunctionEnv'
          type: array
        compliance:
          description: Tags to limit deployment
          items:
            $ref: '#/components/schemas/FunctionCompliance'
          type: array
      required:
      - deployments
      - description
      - id
      - image
      - name
      - port
      - project_id
      - revision
      - scaling
      - secrets
      - size
      - type
      - version
      type: object
    FunctionBody:
      description: Function create body
      example:
        image: docker.io/my-image:latest
        scaling:
          high: 60
          low: 30
          type: cpu
        description: My function does this
        type: http
        version: 1.0.0
        secrets:
        - reference: project_id/secret_id@secret_revision
          name: MY_ENV_VAR
        - reference: project_id/secret_id@secret_revision
          name: MY_ENV_VAR
        routes:
        - path: "/hello/{0-9+}"
          methods:
          - GET
          - POST
          weight: 50
        - path: "/hello/{0-9+}"
          methods:
          - GET
          - POST
          weight: 50
        deployments:
        - replicas:
            min: 1
            max: 5
            affinity:
              cloud: true
              cluster: true
          location:
            continent: EU
            country: GB
            city: London
            provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        - replicas:
            min: 1
            max: 5
            affinity:
              cloud: true
              cluster: true
          location:
            continent: EU
            country: GB
            city: London
            provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        size:
          memory: 128
          cpu: 128
        project_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        port: 8080
        compliance:
        - null
        - null
        name: my-function
      properties:
        project_id:
          description: ID of the project this function belongs to
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        version:
          description: Function spec version
          enum:
          - 1.0.0
          example: 1.0.0
          type: string
        name:
          description: Name of the function
          example: my-function
          minLength: 1
          type: string
        description:
          description: Description of what the function does
          example: My function does this
          type: string
        image:
          description: Path to container image
          example: docker.io/my-image:latest
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/FunctionType'
        size:
          $ref: '#/components/schemas/FunctionSize'
        port:
          description: Port the application runs on
          example: 8080
          type: integer
        routes:
          description: "The public route/path to this function, only applicable to\
            \ http type functions"
          items:
            $ref: '#/components/schemas/FunctionRoute'
          type: array
        scaling:
          $ref: '#/components/schemas/FunctionScaling'
        deployments:
          description: List of deployments for this function
          items:
            $ref: '#/components/schemas/FunctionDeploymentBody'
          type: array
        secrets:
          description: List of environment variables for secrets
          items:
            $ref: '#/components/schemas/FunctionEnv'
          type: array
        compliance:
          description: Tags to limit deployment
          items:
            $ref: '#/components/schemas/FunctionCompliance'
          type: array
      required:
      - deployments
      - description
      - image
      - name
      - port
      - project_id
      - scaling
      - secrets
      - size
      - type
      - version
      type: object
    ListFunction:
      description: List of functions
      example:
        data:
        - image: docker.io/my-image:latest
          scaling:
            high: 60
            low: 30
            type: cpu
          description: My function does this
          type: http
          version: 1.0.0
          secrets:
          - reference: project_id/secret_id@secret_revision
            name: MY_ENV_VAR
          - reference: project_id/secret_id@secret_revision
            name: MY_ENV_VAR
          revision: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          routes:
          - path: "/hello/{0-9+}"
            methods:
            - GET
            - POST
            weight: 50
          - path: "/hello/{0-9+}"
            methods:
            - GET
            - POST
            weight: 50
          deployments:
          - replicas:
              min: 1
              max: 5
              affinity:
                cloud: true
                cluster: true
            location:
              continent: EU
              country: GB
              city: London
              provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
            id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          - replicas:
              min: 1
              max: 5
              affinity:
                cloud: true
                cluster: true
            location:
              continent: EU
              country: GB
              city: London
              provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
            id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          size:
            memory: 128
            cpu: 128
          project_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          port: 8080
          compliance:
          - null
          - null
          name: my-function
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        - image: docker.io/my-image:latest
          scaling:
            high: 60
            low: 30
            type: cpu
          description: My function does this
          type: http
          version: 1.0.0
          secrets:
          - reference: project_id/secret_id@secret_revision
            name: MY_ENV_VAR
          - reference: project_id/secret_id@secret_revision
            name: MY_ENV_VAR
          revision: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          routes:
          - path: "/hello/{0-9+}"
            methods:
            - GET
            - POST
            weight: 50
          - path: "/hello/{0-9+}"
            methods:
            - GET
            - POST
            weight: 50
          deployments:
          - replicas:
              min: 1
              max: 5
              affinity:
                cloud: true
                cluster: true
            location:
              continent: EU
              country: GB
              city: London
              provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
            id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          - replicas:
              min: 1
              max: 5
              affinity:
                cloud: true
                cluster: true
            location:
              continent: EU
              country: GB
              city: London
              provider_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
            id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          size:
            memory: 128
            cpu: 128
          project_id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          port: 8080
          compliance:
          - null
          - null
          name: my-function
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/Function'
          type: array
      required:
      - data
      - meta
      type: object
    Provider:
      description: List of providers
      example:
        name: AWS
        locations:
          cities:
          - London
          - London
          countries:
          - GB
          - GB
          continents:
          - EU
          - EU
        id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
      properties:
        id:
          example: 51687d2f-07b0-4260-8ecb-f5098305fdd4
          format: uuid
          type: string
        name:
          description: Name of provider
          example: AWS
          minLength: 1
          type: string
        locations:
          $ref: '#/components/schemas/Provider_locations'
      required:
      - id
      - locations
      - name
      type: object
    ListProviderResponse:
      description: List of providers
      example:
        data:
        - name: AWS
          locations:
            cities:
            - London
            - London
            countries:
            - GB
            - GB
            continents:
            - EU
            - EU
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        - name: AWS
          locations:
            cities:
            - London
            - London
            countries:
            - GB
            - GB
            continents:
            - EU
            - EU
          id: 51687d2f-07b0-4260-8ecb-f5098305fdd4
        meta:
          pages: 20
          start: 20
          end: 40
          links:
            next: "/{url}?page[after]=40&page[size]=20"
            prev: "/{url}?page[before]=20&page[size]=20"
          results: 200
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        data:
          items:
            $ref: '#/components/schemas/Provider'
          type: array
      required:
      - data
      - meta
      type: object
    organisations_list_page_parameter:
      properties:
        before:
          description: Offset
          example: 20
          type: integer
        after:
          description: Offset
          example: 20
          type: integer
        size:
          description: Limit
          example: 20
          type: integer
      type: object
    BadRequestResponse_fields:
      example:
        email: email
      properties:
        email:
          type: string
      type: object
    SecretResponse_payload:
      oneOf:
      - $ref: '#/components/schemas/SecretMetaResponseCertificatePayload'
      - $ref: '#/components/schemas/SecretMetaResponseRegistryPayload'
    SecretMetaResponse_payload:
      oneOf:
      - $ref: '#/components/schemas/SecretMetaResponseCertificatePayload'
      - $ref: '#/components/schemas/SecretMetaResponseRegistryPayload'
      - $ref: '#/components/schemas/SecretMetaResponseDek'
    FunctionReplicas_affinity:
      description: Replica strategy
      example:
        cloud: true
        cluster: true
      properties:
        cluster:
          description: "If there are > 1 replica, make sure they're on different clusters"
          example: true
          type: boolean
        cloud:
          description: "If there are > 1 replica, make sure they're on different clouds"
          example: true
          type: boolean
      required:
      - cloud
      - cluster
      type: object
    Provider_locations:
      description: Locations at varying levels this provider operates within
      example:
        cities:
        - London
        - London
        countries:
        - GB
        - GB
        continents:
        - EU
        - EU
      properties:
        continents:
          items:
            description: Deployment continent
            example: EU
            type: string
          type: array
        countries:
          items:
            description: Deployment country
            example: GB
            type: string
          type: array
        cities:
          items:
            description: Deployment city
            example: London
            type: string
          type: array
      required:
      - cities
      - continents
      - countries
      type: object
  securitySchemes:
    token:
      scheme: bearer
      type: http
    cookie:
      in: cookie
      name: qernal_kratos_session
      type: apiKey
